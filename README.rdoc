= Baton

Baton is a server written in node that implements the publish-side of Basic HTTP Push Relay Protocol (http://pushmodule.slact.net/protocol.html) combined with a subscriber interface based on Socket.IO (http://socket.io/).

To put it another way, REST-ful on the backend, and WebSocket-y on the front end. Call it a mullet for the modern web.

== Example

  TODO: some example code
  
== Current status

In development, Experimental - has not been run in production or even tested under load

== Dependencies

TODO: flesh out

== Usage

  git clone ...
  cd baton
  node server.js

== Development

Tests are in Ruby's RSpec. Test dependencies can be installed with `bundle install`. Run specs with `rake spec`
 
== TODO

  * Now
    * Way for the client to report the last timestamp it has seen to avoid duplicate messages on reconnection
    * Refactor pub.js
    * Finish README
    * Stress test
    * Refactor to abstract storage and pub/sub mechanism
    * Clean up debug output on tests
    * Timestamps / "last message seen" protocol
  * Future version
    * Port tests to a JS framework
    * Redis pub/sub on the backend
    * Stats endpoint
    * Logging
  
== Concurrency

Zero or more subscribers may be subscribed to a channel at any given time. All subscribers to a channel will
receive messages published to that channel. Baton does not currently support other concurrency models, such
as limiting a channel to one active subscriber.

== Namespacing Channels

There is no programmatic support for channel groups or namespaces. All channels exist in a common namespace from Baton's perspective. A naming convention may be used to create groups of channels.

== Configuration

TODO: write this section

== Credits

Luke Melia <http://www.lukemelia.com> is the author and maintainer of baton.

Thanks to Leo P. for the Nginx HTTP Push Module and the Basic HTTP Push Relay Protocol

== License

BSD
